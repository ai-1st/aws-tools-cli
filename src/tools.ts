import { jsonSchema, tool, ToolSet, generateText } from 'ai';
import { invoke, tools as awsTools } from '@ddegtyarev/aws-tools';
import fs from 'fs-extra';
import * as path from 'path';
import { generatePNGChart } from './chartUtils.js';

interface Credentials {
  accessKeyId: string;
  secretAccessKey: string;
  sessionToken?: string;
}

interface ToolResult {
  summary: string;
  datapointsPath?: string;
  chartPath?: string;
  chartAnalysis?: string;
}

/**
 * Creates AI SDK compatible tools from aws-tools package
 */
export function createTools(
  namesList: string[],
  credentials: Credentials,
  region: string,
  outputPath: string,
  model: any
): ToolSet {
  const toolSet: ToolSet = {};

  for (const toolName of namesList) {
    // Find the tool definition from aws-tools
    const awsTool = awsTools.find(t => t.name === toolName);
    
    if (!awsTool) {
      console.warn(`‚ö†Ô∏è  Tool not found in aws-tools: ${toolName}`);
      continue;
    }

    if (!awsTool.inputSchema) {
      console.warn(`‚ö†Ô∏è  No input schema found for tool: ${toolName}`);
      continue;
    }

    console.log(`üì¶ Creating AI SDK tool: ${toolName}`);

    toolSet[toolName] = tool({
      description: awsTool.description,
      parameters: jsonSchema(awsTool.inputSchema),
      execute: async (params: any): Promise<ToolResult> => {
        console.log(`üîß TOOL CALL: ${toolName} with params:`, JSON.stringify(params, null, 2));
        
        try {
          // Prepare credentials for aws-tools
          const toolCredentials = {
            accessKeyId: credentials.accessKeyId,
            secretAccessKey: credentials.secretAccessKey,
            ...(credentials.sessionToken && { sessionToken: credentials.sessionToken })
          };

          // Invoke the aws-tool
          const result = await invoke(toolName, params, {
            credentials: toolCredentials,
            region: region
          });

          console.log(`‚úÖ TOOL RESULT: ${toolName} returned data`);

          // Prepare the result object
          const toolResult: ToolResult = {
            summary: result.summary || 'Tool execution completed'
          };

          // Handle datapoints if present
          if (result.datapoints) {
            const datapointsFilename = `${toolName}-${generateRandomString()}-data.json`;
            const datapointsPath = path.join(outputPath, 'data', datapointsFilename);
            
            await fs.ensureDir(path.dirname(datapointsPath));
            await fs.writeFile(datapointsPath, JSON.stringify(result.datapoints, null, 2));
            
            toolResult.datapointsPath = datapointsPath;
            console.log(`üíæ Datapoints saved to: ${datapointsPath}`);
          }

          // Handle chart if present
          if (result.chart) {
            try {
              const chartFilename = `${toolName}-${generateRandomString()}`;
              const chartPath = path.join(outputPath, 'charts', 'png', `${chartFilename}.png`);
              
              await fs.ensureDir(path.dirname(chartPath));
              
              // Render chart to PNG
              console.log(`üé® Rendering chart to PNG: ${chartPath}`);
              await generatePNGChart(result.chart, chartFilename, path.join(outputPath, 'charts'));
              
              toolResult.chartPath = chartPath;
              console.log(`üìä Chart saved to: ${chartPath}`);

              // Analyze the chart using the model
              console.log(`ü§ñ Analyzing chart with model...`);
              const chartAnalysis = await analyzeChart(chartPath, model, toolName, result.summary);
              toolResult.chartAnalysis = chartAnalysis;
              console.log(`‚úÖ Chart analysis completed`);

            } catch (chartError) {
              console.error(`‚ùå Chart processing failed for ${toolName}:`, chartError);
              // Continue without chart - don't fail the entire tool execution
            }
          }

          return toolResult;

        } catch (error) {
          console.error(`‚ùå TOOL ERROR: ${toolName} failed:`, error);
          return {
            summary: `Tool execution failed: ${error instanceof Error ? error.message : String(error)}`
          };
        }
      }
    });
  }

  console.log(`‚úÖ Created ${Object.keys(toolSet).length} AI SDK tools`);
  return toolSet;
}

/**
 * Analyze a chart image using the provided model
 */
async function analyzeChart(
  chartPath: string,
  model: any,
  toolName: string,
  context: string
): Promise<string> {
  try {
    // Read the chart image
    const imageBuffer = await fs.readFile(chartPath);
    const base64Image = imageBuffer.toString('base64');

    const prompt = `
Analyze this chart generated by the ${toolName} AWS tool and provide insights.

Context: ${context}

Please provide a concise analysis focusing on:
1. What the chart shows (data patterns, trends)
2. Key insights about AWS costs or metrics
3. Notable patterns or anomalies
4. Actionable recommendations if applicable

Keep the analysis concise but informative.
`;

    const result = await generateText({
      model: model,
      messages: [
        {
          role: 'user',
          content: [
            { type: 'text', text: prompt },
            {
              type: 'image',
              image: `data:image/png;base64,${base64Image}`
            }
          ]
        }
      ],
      maxTokens: 1000,
      temperature: 0.3
    });

    return result.text;

  } catch (error) {
    console.error('Error analyzing chart:', error);
    return `Chart analysis failed: ${error instanceof Error ? error.message : String(error)}`;
  }
}

/**
 * Generate a random string for unique filenames
 */
function generateRandomString(): string {
  return Math.random().toString(36).substring(2, 15);
} 